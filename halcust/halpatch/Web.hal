external function string 255 ReplaceCharByString(string,string,string);
remote updating function Integer raPasteRentResInDispatch(var record DispatchVc,LongInt);
remote updating function Integer raPasteRentResInOffHire(var record OffHireVc,LongInt);

SetLangMode(LangUkrainian,"RUS",0);

procedure CheckImagePath(string filename,string filepathP,var string filepathC)
begin
  
  if (FILEEXISTS(filepathP & filename & ".jpeg")) then begin
		filepathC = filepathP & filename & ".jpeg";
	end else begin
		if (FILEEXISTS(filepathP & filename & ".png")) then begin
			filepathC = filepathP & filename & ".png";
		end else begin
			if (FILEEXISTS(filepathP & filename & ".jpg")) then begin
				filepathC = filepathP & filename & ".jpg";
			end;
		end;
	end;
	
  return;
end;


function string 100 GetStatusCaption(string statusCode)
begin
  string 100 status;
  
    switch (statusCode) begin
      case "in_work": status = "В работе";
      case "no_crew": status = "Нет экипажа";
      case "no_shift": status = "Нет сменщика";
      case "long_term_service": status = "Длительный сервис";
      case "crash_firm_repair": status = "ДТП чиним сами";
      case "crash_own_repair": status = "ДТП чиним за свой счет";
      otherwise status = "Неизвестно";
    end;

  GetStatusCaption = status;
  return;
end;

procedure ShowMessagePage(string param, string basePath)
begin 
  area messPage,tempAr;
  string 255 fileName,markWord,errMess;
  longint strPos;
  Boolean webOutF;
    
    fileName = "message_page.html";
    if (FILEEXISTS(basePath & fileName)) then begin
      if (NonBlank(param)) then begin
        AddFileToArea(basePath & fileName,tempAr,false);
        markWord = "\/\/@error";
        strPos = FINDSTRINGINAREA(markWord,tempAr);
        if (strPos>-1) then begin
          GETAREAFROMAREA(tempAr,0,strPos,messPage);
          AddTextToArea(param,messPage);
          strPos = strPos + len(markWord);
          GETAREAFROMAREA(tempAr,strPos,GetAreaLength(tempAr) - strPos,messPage);
          WebOutArea2(messPage);
          webOutF = true;
        end else begin
          errMess = "no markword";
        end;
      end else begin
        errMess = "Нет сообщения";
      end;
    end else begin
      errMess = "Отсутствует страница";
    end;
    
    if (webOutF==false) then begin
      WebOutString(errMess);
    end;
  
  return
end;

function LongInt GetRentResForDriver(string driverCode,var string mesg,string action)
begin
  LongInt serNr;
  record RentResVc RentResr;
  record RentResBookVc RentBookr;
  record RentControlBlock RCr;
  boolean foundF;
  
    BlockLoad(RCr);
    mesg = "";
    
    if (NonBlank(driverCode)) then begin
      RentBookr.CustCode = driverCode;
      if (ReadLastKey("CustCode",RentBookr,1,true)) then begin
        switch (action) begin
          case "dispatch":
            if (RentBookr.AgreeStatus==RCr.AgreeStatusCreated) then begin
              serNr = RentBookr.SerNr;
              foundF = true;
            end;
          case "return":
            if (RentBookr.AgreeStatus==RCr.AgreeStatusDelivered) then begin
              serNr = RentBookr.SerNr;
              foundF = true;
            end;
        end;
        if (foundF==false) then begin
          mesg = "Статус резервирования авто неподходящий";
        end;
        if (RentBookr.AgreeStatus==RCr.AgreeStatusReturned or RentBookr.AgreeStatus==RCr.AgreeStatusDone) then begin
          mesg = "Авто не зарезервировано для водителя с кодом " & driverCode;
        end;
      end else begin
        mesg = "Авто не зарезервировано для водителя с кодом " & driverCode;
      end;
    end else begin
      mesg = "Не определен код водителя";
    end;

  GetRentResForDriver = serNr;
 return;
end;


global webpublic
procedure WebCheckValidatorPassword()
begin
  string 255 argument,result;
  area aReceived;
  json jsonObj;
    
    result = "failed";
    webgetpostdata(aReceived);
    if (GetAreaLength(aReceived)>0) then begin
      jsonObj = ParseJSONArea(aReceived);
      if (JSONGet(jsonObj,"p")=="1111") then begin
        result = "confirmed";
      end;
    end;
    
    WebOutString(result);

  return;
end;

global webpublic
procedure WebGetDriverList()
begin
  record CUVc CUr;
  area driverList;
  
  CUr.Code = "";
  while (LoopMain(CUr,1,true)) begin
    if (CUr.DriverType==1) then begin
      ADDTEXTTOAREA(CUr.Code & Chr(13),driverList);
    end;
  end;
  
  WebOutArea2(driverList);

  return;
end;

global webpublic
procedure WebDriverTakesCar()
begin
  record RentResVc RentResr,prevRentResr;
  record RentINVc RentINr;
  string 255 driverCode,basePath,fileName,errMessage,mesg,markWord;
  record CUVc CUr;
  area htmlAr,tempAr;
  longint strPos,mileage;
  Boolean proceedF,TrHs,testf;
  string 10 nextline;
  Integer recCnt;
    
    proceedF = true;
    nextline = chr(13) & Chr(10);
    driverCode = WebGetArg("driver_code");
    
    CUr.Code = driverCode;
    proceedF = ReadFirstMain(CUr,1,true);
    if (proceedF==false) then begin
      errMessage = "Не заведена карточка для водителя #" & driverCode;
    end;
    
    basePath = "webcust\\dr_valid\\";
    fileName = "get_car_p2.html";
    if (proceedF and FILEEXISTS(basePath & fileName)==false) then begin
      errMessage = "Нет страницы";
      proceedF = false;
    end;
    
    RentResr.SerNr = GetRentResForDriver(CUr.Code,mesg,"dispatch");
    if (NonBlank(mesg)) then begin
      errMessage = mesg;
      proceedF = false;
    end;
    if (proceedF and ReadFirstMain(RentResr,1,true)==false) then begin
      errMessage = "Не найдено резервирование";
      proceedF = false;
    end;
    
    if (proceedF) then begin
      RentINr.Code = RentResr.Code;
      RentINr.SerialNr = RentResr.SerialNr;
      ReadFirstMain(RentINr,2,true);
      
      AddFileToArea(basePath & fileName,htmlAr,false);
      //initialize form with data
      markWord = "\/\/@putdatatoformscript";
      strPos = FINDSTRINGINAREA(markWord,htmlAr);
      if (strPos>-1) then begin
        AddAreaToArea(htmlAr,tempAr);
        SETAREAZEROSIZE(htmlAr);
        
        GETAREAFROMAREA(tempAr,0,strPos,htmlAr);
        AddTextToArea("(function (){",htmlAr);
        AddTextToArea("$(\'#driver_hansa_code\')[0].value = \"" & driverCode & "\";",htmlAr);
        AddTextToArea("$(\'#firstname\')[0].value = \"" & ReplaceCharByString(CUr.Name,"\"","\'") & "\";",htmlAr);
        AddTextToArea("$(\'#lastname\')[0].value = \"" & ReplaceCharByString(CUr.Name,"\"","\'") & "\";",htmlAr);
        if (NonBlank(RentResr.SerialNr)) then begin
          AddTextToArea("$(\'#reg_number\')[0].value = \"" & RentResr.SerialNr & "\";",htmlAr);
        end;
        AddTextToArea("})();" & nextline,htmlAr);
        strPos = strPos + len(markWord);
        GETAREAFROMAREA(tempAr,strPos,GetAreaLength(tempAr) - strPos,htmlAr);
      end;
      
      //include modal conformation window to form button
      markWord = "<!--@includeConfirmModalWindow-->";
      strPos = FINDSTRINGINAREA(markWord,htmlAr);
      if (strPos>-1) then begin
        fileName = "confirm_form_modal.html";
        if (FILEEXISTS(basePath & fileName)) then begin
          SETAREAZEROSIZE(tempAr);
          AddAreaToArea(htmlAr,tempAr);
          SETAREAZEROSIZE(htmlAr);
          
          GETAREAFROMAREA(tempAr,0,strPos,htmlAr);
          AddFileToArea(basePath & fileName,htmlAr,false);
          strPos = strPos + len(markWord);
          GETAREAFROMAREA(tempAr,strPos,GetAreaLength(tempAr) - strPos,htmlAr);
        end;       
      end;
      
      //find driver photo
      markWord = "\/\/@DriverPhoto";
      strPos = FINDSTRINGINAREA(markWord,htmlAr);;
      fileName = "";
      CheckImagePath(CUr.Code,basePath & "photo\\",fileName);
      if (strPos>-1 and FILEEXISTS(fileName)) then begin
        SETAREAZEROSIZE(tempAr);
        AddAreaToArea(htmlAr,tempAr);
        SETAREAZEROSIZE(htmlAr);
        
        GETAREAFROMAREA(tempAr,0,strPos,htmlAr);
        AddTextToArea(fileName,htmlAr);
        strPos = strPos + len(markWord);
        GETAREAFROMAREA(tempAr,strPos,GetAreaLength(tempAr) - strPos,htmlAr);
      end;
      
      //find automobile mileage
      markWord = "\/\/@start_mileage";
      strPos = FINDSTRINGINAREA(markWord,htmlAr);
      if (strPos>-1) then begin
        SETAREAZEROSIZE(tempAr);
        AddAreaToArea(htmlAr,tempAr);
        SETAREAZEROSIZE(htmlAr);
        
        GETAREAFROMAREA(tempAr,0,strPos,htmlAr);
        prevRentResr.Code = RentResr.Code;
        prevRentResr.SerialNr = RentResr.SerialNr;
        TrHs = true;
        recCnt = 0;
        mileage = -1;
        while (LoopBackKey("Code",prevRentResr,2,TrHs)) begin
          testf = true;
          if (prevRentResr.Code!=RentResr.Code or prevRentResr.SerialNr!=RentResr.SerialNr) then begin TrHs = false; testf = false; end;
          if (RentResr.SerNr==prevRentResr.SerNr) then begin testf = false; end;
          if (testf) then begin
            recCnt = recCnt + 1;
            TrHs = false;
          end;
        end;
        if (recCnt==1) then begin
          mileage = prevRentResr.EndMileage;
        end else begin
          if (recCnt==0 and RentINr.InitMileage>0) then begin
            mileage = RentINr.InitMileage;
          end;
        end;
        if (mileage>-1) then begin
          AddTextToArea(mileage,htmlAr);
        end;
        strPos = strPos + len(markWord);
        GETAREAFROMAREA(tempAr,strPos,GetAreaLength(tempAr) - strPos,htmlAr);     
      end;

      WebSetContentType("text/html");
      if (proceedF) then begin
        WebOutArea2(htmlAr); 
      end;
    end;
    
    if (proceedF==false) then begin
      ShowMessagePage(errMessage,basePath);
    end;

  return;
end;

global webpublic
procedure WebDriverReturnsCar()
begin
  record RentResVc RentResr;
  string 255 driverCode,basePath,fileName,errMessage,mesg,markWord;
  record CUVc CUr;
  area htmlAr,tempAr;
  longint strPos;
  Boolean proceedF;
  string 10 nextline;
  LongInt tempInt;
    
    proceedF = true;
    nextline = chr(13) & Chr(10);
    driverCode = WebGetArg("driver_code");
    
    CUr.Code = driverCode;
    proceedF = ReadFirstMain(CUr,1,true);
    if (proceedF==false) then begin
      errMessage = "No contact card for driver #" & driverCode;
    end;
    
    basePath = "webcust\\dr_valid\\";
    fileName = "return_car_p2.html";
    if (proceedF and FILEEXISTS(basePath & fileName)==false) then begin
      errMessage = "No page to display";
      proceedF = false;
    end;
    
    RentResr.SerNr = GetRentResForDriver(CUr.Code,mesg,"return");
    if (NonBlank(mesg)) then begin
      errMessage = mesg;
      proceedF = false;
    end;
    if (proceedF and ReadFirstMain(RentResr,1,true)==false) then begin
      errMessage = "Can not find a reservation";
      proceedF = false;
    end;
    
    if (proceedF) then begin
      AddFileToArea(basePath & fileName,htmlAr,false);
      //initialize form with data
      markWord = "\/\/@putdatatoformscript";
      strPos = FINDSTRINGINAREA(markWord,htmlAr);
      if (strPos>-1) then begin
        AddAreaToArea(htmlAr,tempAr);
        SETAREAZEROSIZE(htmlAr);
        GETAREAFROMAREA(tempAr,0,strPos,htmlAr);
        AddTextToArea("(function (){",htmlAr);
        AddTextToArea("$(\'#driver_hansa_code\')[0].value = \"" & driverCode & "\";",htmlAr);
        AddTextToArea("$(\'#firstname\')[0].value = \"" & ReplaceCharByString(CUr.Name,"\"","\'") & "\";",htmlAr);
        AddTextToArea("$(\'#lastname\')[0].value = \"" & ReplaceCharByString(CUr.Name,"\"","\'") & "\";",htmlAr);
        if (NonBlank(RentResr.SerialNr)) then begin
          AddTextToArea("$(\'#reg_number\')[0].value = \"" & RentResr.SerialNr & "\";",htmlAr);
        end;
        if (RentResr.StartMileage<>0) then begin
          tempInt = RentResr.StartMileage;
          AddTextToArea("$(\'#start_mileage\')[0].value = \"" & tempInt & "\";",htmlAr);
        end;
        AddTextToArea("})();" & nextline,htmlAr);
        strPos = strPos + len(markWord);
        GETAREAFROMAREA(tempAr,strPos,GetAreaLength(tempAr) - strPos,htmlAr);
      end;
      
      //include modal conformation window to form button
      markWord = "<!--@includeConfirmModalWindow-->";
      strPos = FINDSTRINGINAREA(markWord,htmlAr);
      if (strPos>-1) then begin
        fileName = "confirm_form_modal.html";
        if (FILEEXISTS(basePath & fileName)) then begin
          SETAREAZEROSIZE(tempAr);
          AddAreaToArea(htmlAr,tempAr);
          SETAREAZEROSIZE(htmlAr);
          
          GETAREAFROMAREA(tempAr,0,strPos,htmlAr);
          AddFileToArea(basePath & fileName,htmlAr,false);
          strPos = strPos + len(markWord);
          GETAREAFROMAREA(tempAr,strPos,GetAreaLength(tempAr) - strPos,htmlAr);
        end;       
      end;
      
      //include modal feeedback window
      markWord = "<!--@includeFeedBackModalWindow-->";
      strPos = FINDSTRINGINAREA(markWord,htmlAr);
      if (strPos>-1) then begin
        fileName = "feedback_modal.html";
        if (FILEEXISTS(basePath & fileName)) then begin
          SETAREAZEROSIZE(tempAr);
          AddAreaToArea(htmlAr,tempAr);
          SETAREAZEROSIZE(htmlAr);
          
          GETAREAFROMAREA(tempAr,0,strPos,htmlAr);
          AddFileToArea(basePath & fileName,htmlAr,false);
          strPos = strPos + len(markWord);
          GETAREAFROMAREA(tempAr,strPos,GetAreaLength(tempAr) - strPos,htmlAr);
        end;       
      end;
      
      //find driver photo
      markWord = "\/\/@DriverPhoto";
      strPos = FINDSTRINGINAREA(markWord,htmlAr);
      fileName = "";
      CheckImagePath(CUr.Code,basePath & "photo\\",fileName);
      if (strPos>-1 and FILEEXISTS(fileName)) then begin
        SETAREAZEROSIZE(tempAr);
        AddAreaToArea(htmlAr,tempAr);
        SETAREAZEROSIZE(htmlAr);
        
        GETAREAFROMAREA(tempAr,0,strPos,htmlAr);
        AddTextToArea(fileName,htmlAr);
        strPos = strPos + len(markWord);
        GETAREAFROMAREA(tempAr,strPos,GetAreaLength(tempAr) - strPos,htmlAr);
      end;

      WebSetContentType("text/html");
      if (proceedF) then begin
        WebOutArea2(htmlAr); 
      end;
    end;
    
    if (proceedF==false) then begin
      ShowMessagePage(errMessage,basePath);
    end;

  return;
end;

updating procedure MakeDispatch(LongInt rentResrSerNr,var string errMsg)
begin
  record DispatchVc Dispatchr,oldDispatchr;
  Integer r;
  
    if (rentResrSerNr>-1) then begin
      r = raPasteRentResInDispatch(Dispatchr,rentResrSerNr);
      if (r!=-1) then begin
        if (MatRowCnt(Dispatchr)!=0) then begin
          RecordCopy(oldDispatchr,Dispatchr);
          Dispatchr.OKFlag = 1;
          if (RecordUpdate(oldDispatchr,Dispatchr,true)) then begin
            if (NonBlank(errMsg)) then begin
              errMsg = errMsg & " ";
            end;
            errMsg = errMsg & "Unable to OK DispatchVc.";
          end;
        end else begin
          if (NonBlank(errMsg)) then begin
            errMsg = errMsg & " ";
          end;
          errMsg = errMsg & "No rows in DispatchVc.";
        end;
      end else begin
        if (NonBlank(errMsg)) then begin
          errMsg = errMsg & " ";
        end;
        errMsg = errMsg & "DispatchVc error. " & r & ".";
      end;
    end;
  
  return;
end;

updating procedure MakeOffHire(LongInt rentResrSerNr,var string errMsg)
begin
  record OffHireVc OffHirer,oldOffHirer;
  Integer r;
  
    if (rentResrSerNr>-1) then begin
      r = raPasteRentResInOffHire(OffHirer,rentResrSerNr);
      if (r!=-1) then begin
        if (MatRowCnt(OffHirer)!=0) then begin
          RecordCopy(oldOffHirer,OffHirer);
          OffHirer.OKFlag = 1;
          if (RecordUpdate(oldOffHirer,OffHirer,true)) then begin
            if (NonBlank(errMsg)) then begin
              errMsg = errMsg & " ";
            end;
            errMsg = errMsg & "Unable to OK DispatchVc.";
          end;
        end else begin
          if (NonBlank(errMsg)) then begin
            errMsg = errMsg & " ";
          end;
          errMsg = errMsg & "No rows in DispatchVc.";
        end;
      end else begin
        if (NonBlank(errMsg)) then begin
          errMsg = errMsg & " ";
        end;
        errMsg = errMsg & "DispatchVc error. " & r & ".";
      end;
    end;
  
  return;
end;

global webpublic
updating procedure WebHandleDataFromDriver()
begin
  record RentResVc RentResr;
  area aReceived,encodedSignature,DecodedArea;
  string 255 messStr,formFieldName,formFieldData,tstr,fileName,action,mesg,driverCode,errMsg;
  string 10 nextline;
  longint i,areaLen;
  Integer step;
  string 5 c;
  Boolean formFieldFoundF,simpleFormFieldF,saveF,proceedF;
  vector string 255 formDataVect;
  array string 255 indexes;
    
    action = WebGetArg("action");
    nextline = chr(13) & Chr(10);
    proceedF = true;
    
    webgetpostdata(aReceived);
    //AddFileToArea("post.txt",aReceived,false);
    
    areaLen = GetAreaLength(aReceived);
    if (areaLen==0) then begin
      messStr = "Нет данных для обработки";
      proceedF = false;
    end;
    
    if (proceedF) then begin
      //WRITEAREATOFILE(aReceived,"post.txt",0);
      AddTextToArea(nextline,aReceived);
      areaLen = GetAreaLength(aReceived);
      for (i=0;i<areaLen;i=i+1) begin
        c = GetStringFromArea(aReceived,i,1);
        if (c==Chr(13) or c==Chr(10)) then begin
          if (GetStringFromArea(aReceived,i+1,1)==Chr(10)) then begin
            if (NonBlank(formFieldData) and formFieldFoundF) then begin
              formDataVect[formFieldName] = formFieldData;
            end;
            formFieldName = "";
            formFieldData = "";
            simpleFormFieldF = false;
            formFieldFoundF = false;
          end;
        end else begin
          if (formFieldFoundF==false) then begin
            formFieldName = formFieldName & c;
            switch (formFieldName) begin 
              case "driver_hansa_code":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "car_status":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "start_mileage":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true; 
              case "end_mileage":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "diff_mileage":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "uber_mileage":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "overmileage":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "km_cost_no_bonus":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "km_cost_with_bonus":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "tot_cost_fuel":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "cashbox_last":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "cashbox_current":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "cashbox_tot":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "bonus_last":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "bonus_current":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "bonus_tot":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "cash_last":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "cash_current":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "cash_tot":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "cashbox_for_pay":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "cash_for_driver":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "jobTextFeedback":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "jobFeedback":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "shiftTextFeedback":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "shiftFeedback":
                i = i + 1;
                formFieldFoundF = true;
                simpleFormFieldF = true;
              case "signature":
                i = i + len("=data:image/png;base64,");
                formFieldFoundF = true;
            end;
          end else begin
            if (simpleFormFieldF) then begin
              formFieldData = formFieldData & c;
            end else begin
              AddTextToArea(c,encodedSignature);
            end;
          end;
        end;
      end;
      
      GetVectorTags(formDataVect,indexes);
      areaLen = GetAreaLength(encodedSignature);
      if (indexes.length>0 or areaLen>0) then begin
        driverCode = formDataVect["driver_hansa_code"];
        RentResr.SerNr = GetRentResForDriver(driverCode,mesg,action);
        if (RentResr.SerNr>-1 and ReadFirstMain(RentResr,1,false)) then begin
          for (i=0;i<indexes.length;i=i+1) begin
            switch (indexes[i]) begin
              case "car_status":
                if (action=="dispatch") then begin
                  RentResr.CarStatusDispatched = GetStatusCaption(formDataVect[indexes[i]]);
                  saveF = true;
                end;
                if (action=="return") then begin
                  RentResr.CarStatusReturned = GetStatusCaption(formDataVect[indexes[i]]);
                  saveF = true;
                end;
              case "start_mileage":
                RentResr.StartMileage = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "end_mileage":
                RentResr.EndMileage = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "diff_mileage":
                RentResr.DiffMileage = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "uber_mileage":
                RentResr.UberMileage = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "overmileage":
                RentResr.OverMileage = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "km_cost_no_bonus":
                RentResr.KMCostNoBonus = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "km_cost_with_bonus":
                RentResr.KMCostWithBonus = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "tot_cost_fuel":
                RentResr.TotCostFuel = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "cashbox_last":
                RentResr.CashboxLast = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "cashbox_current":
                RentResr.CashboxCurrent = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "cashbox_tot":
                RentResr.CashboxTot = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "bonus_last":
                RentResr.BonusLast = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "bonus_current":
                RentResr.BonusCurrent = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "bonus_tot":
                RentResr.BonusTot = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "cash_last":
                RentResr.CashLast = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "cash_current":
                RentResr.CashCurrent = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "cash_tot":
                RentResr.CashTot = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "cashbox_for_pay":
                RentResr.CashboxForPay = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "cash_for_driver":
                RentResr.CashForDriver = StringToVal(formDataVect[indexes[i]],M4Val);
                saveF = true;
              case "jobFeedback": 
                switch (formDataVect[indexes[i]]) begin
                  case "yes": 
                    RentResr.DriverFeedback = "Да";
                    saveF = true;
                  case "no": 
                    RentResr.DriverFeedback = "Нет";
                    saveF = true;
                end;
              case "shiftFeedback":
                switch (formDataVect[indexes[i]]) begin
                  case "yes": 
                    RentResr.DriverFeedback2 = "Да";
                    saveF = true;
                  case "no": 
                    RentResr.DriverFeedback2 = "Нет";
                    saveF = true;
                end;
              case "jobTextFeedback":
                tstr = formDataVect[indexes[i]];
                if (NonBlank(tstr)) then begin
                  if (NonBlank(RentResr.DriverFeedback)) then begin
                    RentResr.DriverFeedback = RentResr.DriverFeedback & ". ";
                  end;
                  RentResr.DriverFeedback = RentResr.DriverFeedback & tstr;
                  saveF = true;
                end;
              case "shiftTextFeedback":
                tstr = formDataVect[indexes[i]];
                if (NonBlank(tstr)) then begin
                  if (NonBlank(RentResr.DriverFeedback2)) then begin
                    RentResr.DriverFeedback2 = RentResr.DriverFeedback2 & ". ";
                  end;
                  RentResr.DriverFeedback2 = RentResr.DriverFeedback2 & tstr;
                  saveF = true;
                end;
            end;
          end;
          if (areaLen>0) then begin
            fileName = driverCode & "_car_" & action & ".png"; //needs to be unique for every driver
                      
            i = 0;
            step = 224;
            while (areaLen>0) begin
              tstr = Base64Decode(GetStringFromArea(encodedSignature,i,step));
              AddTextToArea(tstr,DecodedArea);
              areaLen = areaLen - step;
              i = i + step;
              if (areaLen<step) then begin
                step = areaLen;
              end;
            end;
            
            WRITEAREATOFILE(DecodedArea,fileName,0);
            if (FILEEXISTS(fileName)) then begin
              if (RecordLinkFile(fileName,0,RentResr,CurrentCompany)) then begin
                Delete_File(fileName);
              end;
            end;
          end;
          switch (action) begin
            case "dispatch":
              RentResr.CarDispatchedTime = CurrentTime;
            case "return":
              RentResr.CarReturnedTime = CurrentTime;
          end;
          if (saveF) then begin
            if (RECORDSTORE(RentResr,true)) then begin
              switch (action) begin
                case "dispatch":
                  MakeDispatch(RentResr.SerNr,errMsg);
                case "return":
                  MakeOffHire(RentResr.SerNr,errMsg);
              end;
            end;
          end;
        end else begin
          errMsg = mesg;
        end;
      end;
      
      messStr = "Данные приняты";
      if (NonBlank(errMsg)) then begin
        messStr = errMsg;
      end;
    end;
 
    ShowMessagePage(messStr,"webcust\\dr_valid\\");

  return;
end;

global webpublic
procedure WebMain()
begin
  string 255 basePath,fileName,markWord;
  area htmlAr,tempAr;
  longint strPos;
  
  basePath = "webcust\\dr_valid\\";
  fileName = "get_car_p1.html";
  if (FILEEXISTS(basePath & fileName)) then begin
    AddFileToArea(basePath & fileName,htmlAr,false);
    markWord = "<!--@<base>-->";
    strPos = FINDSTRINGINAREA(markWord,htmlAr);
    if (strPos>-1) then begin
      AddAreaToArea(htmlAr,tempAr);
      SETAREAZEROSIZE(htmlAr);
      GETAREAFROMAREA(tempAr,0,strPos,htmlAr);
      
      AddTextToArea("<base href=\"dr_valid\/\">",htmlAr);
      strPos = strPos + len(markWord);
      GETAREAFROMAREA(tempAr,strPos,GetAreaLength(tempAr) - strPos,htmlAr);
    end;
    WebOutArea2(htmlAr);
  end else begin
    WebOutString("FAIL");
  end;
  
  return;
end;
